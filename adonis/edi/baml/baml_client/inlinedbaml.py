###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "clients.baml": "client<llm> CustomAWS_Mistral_Large_2401_V1 {\n  provider aws-bedrock\n  options {\n    model \"mistral.mistral-large-2402-v1:0\"\n    region env.AWS_REGION\n    access_key_id env.AWS_ACCESS_KEY_ID\n    secret_access_key env.AWS_SECRET_ACCESS_KEY\n  }\n}\n",
    "extractors/x12/extractor.baml": "class X12Input {\n    release (5010) @description(#\"\n        The X12 release version, formatted as a six-digit string (e.g., '004010', '005010'). \n        This indicates the specific version of the X12 standard being used, which is essential for \n        correctly interpreting and parsing the transaction data according to the appropriate specifications.\n    \"#)\n    transaction_set_id (835) @description(#\"\n        The three-digit X12 transaction set identifier (e.g., '835' for Health Care Claim Payment/Advice, \n        '837' for Health Care Claim). This code specifies the type of transaction being processed.\n    \"#)\n    data string @description(#\"\n        The complete X12 transaction data in its raw, delimited format. \n        Use this data to extract the necessary information according to the specified schema.        \n    \"#)\n\n}\n\n\nclass X12Output {\n    release int @description(#\"\n        The X12 release version, formatted as a six-digit string (e.g., '004010', '005010'). \n        This indicates the specific version of the X12 standard being used, which is essential for \n        correctly interpreting and parsing the transaction data according to the appropriate specifications.\n    \"#)\n    transaction_set_id int @description(#\"\n        The three-digit X12 transaction set identifier (e.g., '835' for Health Care Claim Payment/Advice, \n        '837' for Health Care Claim). This code specifies the type of transaction being processed.\n    \"#)\n    data (X12_835_5010) @description(#\"\n        A list containing the complete X12 transaction data structured according to the X12 schema. \n        Each item in the list represents a parsed segment of the transaction, enabling structured access to \n        payment and remittance information as defined by the X12 835 5010 specifications.\n    \"#)\n}\n\n\nfunction X12Extractor(params: X12Input) -> (X12Output) {\n  client CustomAWS_Mistral_Large_2401_V1\n  prompt #\"\n     You are an expert in X12 Electronic Data Interchange, specializing in healthcare transactions such as 835 (Healthcare Claim Payment/Advice) and 837 (Healthcare Claim). \n     Your task is to parse the provided raw X12 transaction data and extract the relevant information into a structured format according to the provided JSON schema.\n\n     * The raw X12 data includes segments, elements, and delimiters: segment terminators (~), element separators (*), and component element separators (:).\n     * The transaction type (e.g., 835, 837) is provided in the input.\n     * If the X12 data is invalid, malformed, or you cannot extract the required information according to the schema, return `null`.\n\n     \n     Rules:\n     * Any empty strings with length should be replaced by `null`\n     * All strings must be trimmed. For example `  hello  ` should be `hello`\n\n     Use the provided output format to guide your extraction.\n\n     X12 Release: {{ params.release }}\n     Transaction Set ID: {{ params.transaction_set_id }}\n\n     Extract this X12 transaction:\n     ---\n     {{ params.data }}\n     ---\n\n     {{ ctx.output_format }}\n  \"#\n}\n",
    "extractors/x12/prompts/835/5010/fields/AMT/v0.baml": "class X12_835_5010_AMT_V0 {\n    AMT01_amount_qualifier_code string @description(#\"\n        Example:\n        ---        \n        * (AMT*AU*25~, AU)\n    \"#)\n\n    AMT02_monetary_amount string @description(#\"\n        Example:\n        ---\n        * (AMT*AU*25~, 25)\n    \"#)\n\n    AMT03_credit_debit_flag_code string? @description(#\"\n        Example:\n        ---\n        * (AMT*AU*25*C~, C)\n        ---\n    \"#)\n}\n",
    "extractors/x12/prompts/835/5010/fields/BPR/v0.baml": "class X12_835_5010_BPR_V0 {\n    BPR01_transaction_handling_code string @description(#\"\n        Example:\n        ---        \n        * (BPR*I*1500.50*C*ACH*CTX*123456789*987654321*111222333*444555666*PR*PPD*XYZ123*ABC789*DEF456*GHI012*JKL345*MNO678*PQR901*STU234*20230515~, I)\n        ---        \n    \"#)\n\n    BPR02_monetary_amount float @description(#\"\n        Example:\n        ---        \n        * (BPR*I*1500.50*C*ACH*CTX*123456789*987654321*111222333*444555666*PR*PPD*XYZ123*ABC789*DEF456*GHI012*JKL345*MNO678*PQR901*STU234*20230515~, 1500.50)\n        ---        \n    \"#)\n\n    BPR03_credit_debit_flag_code string @description(#\"\n        Example:\n        ---        \n        * (BPR*I*1500.50*C*ACH*CTX*123456789*987654321*111222333*444555666*PR*PPD*XYZ123*ABC789*DEF456*GHI012*JKL345*MNO678*PQR901*STU234*20230515~, C)\n        ---        \n    \"#)\n\n    BPR04_payment_method_code string @description(#\"\n        Example:\n        ---        \n        * (BPR*I*1500.50*C*ACH*CTX*123456789*987654321*111222333*444555666*PR*PPD*XYZ123*ABC789*DEF456*GHI012*JKL345*MNO678*PQR901*STU234*20230515~, ACH)\n        ---        \n    \"#)\n\n    BPR05_payment_format_code string? @description(#\"\n        Example:\n        ---\n        * (BPR*I*1500.50*C*ACH*CTX*123456789*987654321*111222333*444555666*PR*PPD*XYZ123*ABC789*DEF456*GHI012*JKL345*MNO678*PQR901*STU234*20230515~, CTX)\n        ---        \n    \"#)\n\n    BPR06_depository_financial_institution_dfi_identification_number_qualifier string? @description(#\"\n        Example:\n        ---\n        * (BPR*I*1500.50*C*ACH*CTX*01*123456789*987654321*111222333*444555666*PR*PPD*XYZ123*ABC789*DEF456*GHI012*JKL345*MNO678*PQR901*STU234*20230515~, 01)\n        ---        \n    \"#)\n\n    BPR07_sender_dfi_identifier string? @description(#\"\n        Example:\n        ---\n        * (BPR*I*1500.50*C*ACH*CTX*01*123456789*987654321*111222333*444555666*PR*PPD*XYZ123*ABC789*DEF456*GHI012*JKL345*MNO678*PQR901*STU234*20230515~, 123456789)\n        ---        \n    \"#)\n\n    BPR08_account_number_qualifier string? @description(#\"\n        Example:\n        ---\n        * (BPR*I*1500.50*C*ACH*CTX*01*123456789*DA*987654321*PR*PPD*XYZ123*ABC789*DEF456*GHI012*JKL345*MNO678*PQR901*STU234*20230515~, DA)\n        ---        \n    \"#)\n\n    BPR09_sender_bank_account_number_09 string? @description(#\"\n        Example:\n        ---\n        * (BPR*I*1500.50*C*ACH*CTX*01*123456789*DA*987654321*PR*PPD*XYZ123*ABC789*DEF456*GHI012*JKL345*MNO678*PQR901*STU234*20230515~, 987654321)\n        ---        \n    \"#)\n\n    BPR10_payer_identifier string? @description(#\"\n        Example:\n        ---\n        * (BPR*I*1500.50*C*ACH*CTX*01*123456789*DA*987654321*PR*PPD*XYZ123*ABC789*DEF456*GHI012*JKL345*MNO678*PQR901*STU234*20230515~, PR)\n        ---        \n    \"#)\n\n    BPR11_originating_company_supplemental_code string? @description(#\"\n        Example:\n        ---\n        * (BPR*I*1500.50*C*ACH*CTX*01*123456789*DA*987654321*PR*PPD*XYZ123*ABC789*DEF456*GHI012*JKL345*MNO678*PQR901*STU234*20230515~, PPD)\n        ---\n    \"#)      \n    BPR12_originating_company_payment_type_code string? @description(#\"\n        Example:\n        ---\n        * (BPR*I*1500.50*C*ACH*CTX*01*123456789*DA*987654321*PR*PPD*XYZ123*ABC789*DEF456*GHI012*JKL345*MNO678*PQR901*STU234*20230515~, XYZ123)\n        ---        \n    \"#)\n\n    BPR13_originating_company_payment_type_code string? @description(#\"\n        Example:\n        ---\n        * (BPR*I*1500.50*C*ACH*CTX*01*123456789*DA*987654321*PR*PPD*XYZ123*ABC789*DEF456*GHI012*JKL345*MNO678*PQR901*STU234*20230515~, ABC789)\n        ---        \n    \"#)\n\n    BPR14_originating_company_payment_type_code string? @description(#\"\n        Example:\n        ---\n        * (BPR*I*1500.50*C*ACH*CTX*01*123456789*DA*987654321*PR*PPD*XYZ123*ABC789*DEF456*GHI012*JKL345*MNO678*PQR901*STU234*20230515~, DEF456)\n        ---        \n    \"#)\n\n    BPR15_originating_company_payment_type_code string? @description(#\"\n        Example:\n        ---\n        * (BPR*I*1500.50*C*ACH*CTX*01*123456789*DA*987654321*PR*PPD*XYZ123*ABC789*DEF456*GHI012*JKL345*MNO678*PQR901*STU234*20230515~, GHI012)\n        ---        \n    \"#)\n\n    BPR16_originating_company_payment_type_code string? @description(#\"\n        Example:\n        ---\n        * (BPR*I*1500.50*C*ACH*CTX*01*123456789*DA*987654321*PR*PPD*XYZ123*ABC789*DEF456*GHI012*JKL345*MNO678*PQR901*STU234*20230515~, JKL345)\n        ---        \n    \"#)\n\n    BPR17_originating_company_payment_type_code string? @description(#\"\n        Example:\n        ---\n        * (BPR*I*1500.50*C*ACH*CTX*01*123456789*DA*987654321*PR*PPD*XYZ123*ABC789*DEF456*GHI012*JKL345*MNO678*PQR901*STU234*20230515~, MNO678)\n        ---        \n    \"#)\n\n    BPR18_originating_company_payment_type_code string? @description(#\"\n        Example:\n        ---\n        * (BPR*I*1500.50*C*ACH*CTX*01*123456789*DA*987654321*PR*PPD*XYZ123*ABC789*DEF456*GHI012*JKL345*MNO678*PQR901*STU234*20230515~, PQR901)\n        ---        \n    \"#)\n\n    BPR19_originating_company_payment_type_code string? @description(#\"\n        Example:\n        ---\n        * (BPR*I*1500.50*C*ACH*CTX*01*123456789*DA*987654321*PR*PPD*XYZ123*ABC789*DEF456*GHI012*JKL345*MNO678*PQR901*STU234*20230515~, STU234)\n        ---        \n    \"#)\n\n    BPR20_payment_date string? @description(#\"\n        Example:\n        ---\n        * (BPR*I*1500.50*C*ACH*CTX*01*123456789*DA*987654321*PR*PPD*XYZ123*ABC789*DEF456*GHI012*JKL345*MNO678*PQR901*STU234*20230515~, 20230515)\n        ---        \n    \"#)\n}\n",
    "extractors/x12/prompts/835/5010/fields/CAS/v0.baml": "class X12_835_5010_CAS_V0 {\n    CAS01_adjustment_group_code string @description(#\"\n        Example:\n        ---        \n        * (CAS*CO*45*5**B4*2~, CO)\n        ---        \n    \"#)\n\n    CAS02_adjustment_reason_code string @description(#\"\n        Example:\n        ---        \n        * (CAS*CO*45*5**B4*2~, 45)\n        ---        \n    \"#)\n\n    CAS03_adjustment_amount string @description(#\"\n        Example:\n        ---        \n        * (CAS*CO*45*5**B4*2~, 5)\n        ---        \n    \"#)\n\n    CAS04_quantity string? @description(#\"\n        Example:\n        ---        \n        * (CAS*CO*45*5*2~, 2)\n        ---        \n    \"#)\n\n    CAS05_additional_reason_code string? @description(#\"\n        Example:\n        ---        \n        * (CAS*CO*45*5**B4*2~, B4)\n        ---        \n    \"#)\n\n    CAS06_additional_adjustment_amount string? @description(#\"\n        Example:\n        ---        \n        * (CAS*CO*45*5**B4*2~, 2)\n        ---        \n    \"#)\n}\n",
    "extractors/x12/prompts/835/5010/fields/CLP/v0.baml": "class X12_835_5010_CLP_V0 {\n    CLP01_patient_control_number string @description(#\"\n        Example:\n        ---        \n        * (CLP*PCN*1*25*8*10*12*CLAIMNUMB*11*1~, PCN)\n        ---        \n    \"#)\n\n    CLP02_claim_status_code string @description(#\"\n        Example:\n        ---        \n        * (CLP*PCN*1*25*8*10*12*CLAIMNUMB*11*1~, 1)\n        ---        \n    \"#)\n\n    CLP03_total_claim_charge_amount string @description(#\"\n        Example:\n        ---        \n        * (CLP*PCN*1*25*8*10*12*CLAIMNUMB*11*1~, 25)\n        ---        \n    \"#)\n\n    CLP04_total_claim_payment_amount string @description(#\"\n        Example:\n        ---        \n        * (CLP*PCN*1*25*8*10*12*CLAIMNUMB*11*1~, 8)\n        ---        \n    \"#)\n\n    CLP05_patient_responsibility_amount string @description(#\"\n        Example:\n        ---        \n        (CLP*PCN*1*25*8*10*12*CLAIMNUMB*11*1~, 10)\n        ---        \n    \"#)\n\n    CLP06_total_claim_disallowed_amount string? @description(#\"\n        Example:\n        ---        \n        * (CLP*PCN*1*25*8*10*12*CLAIMNUMB*11*1*5~, 5)\n        ---        \n    \"#)\n\n    CLP07_claim_identifier string @description(#\"\n        Example:\n        ---        \n        * (CLP*PCN*1*25*8*10*12*CLAIMNUMB*11*1~, CLAIMNUMB)\n        ---        \n    \"#)\n\n    CLP08_provider_adjustment_amount string? @description(#\"\n        Example:\n        ---        \n        * (CLP*PCN*1*25*8*10*12*CLAIMNUMB*11*1*20~, 20)\n        ---\n    \"#)\n\n    CLP09_claim_frequency_code string @description(#\"\n        Example:\n        ---        \n        * (CLP*PCN*1*25*8*12*CLAIMNUMB*11*1~, 1)\n        ---        \n    \"#)\n}\n",
    "extractors/x12/prompts/835/5010/fields/CUR/v0.baml": "class X12_835_5010_CUR_V0 {\n    CUR01_entity_identifier_code string @description(#\"\n        Example:\n        ---        \n        * (CUR*BY*USD*1.000~, BY)\n        ---        \n    \"#)\n    \n    CUR02_currency_code string @description(#\"\n        Example:\n        ---        \n        * (CUR*BY*USD*1.000~, USD)\n        ---        \n    \"#)\n    \n    CUR03_exchange_rate string? @description(#\"\n        Example:\n        ---        \n        * (CUR*BY*USD*1.000~, 1.000)\n        ---        \n    \"#)\n    \n    CUR04_currency_conversion_type_code string? @description(#\"\n        Example:\n        ---        \n        * (CUR*BY*USD*1.000*C~, C)\n        ---        \n    \"#)\n    \n    CUR05_currency_unit_or_basis string? @description(#\"\n        Example:\n        ---        \n        * (CUR*BY*USD*1.000*C*100~, 100)\n        ---        \n    \"#)\n}\n",
    "extractors/x12/prompts/835/5010/fields/DTM/v0.baml": "class X12_835_5010_DTM_V0 {\n    DTM01_date_time_qualifier string @description(#\"\n        Example:\n        ---        \n        * (DTM*472*20230515~, 472)\n        * (DTM*573*20230515*1300~, 573)\n        ---        \n    \"#)\n    \n    DTM02_date string @description(#\"\n        Example:\n        ---        \n        * (DTM*472*20230515~, 20230515)\n        * (DTM*573*20230515*1300~, 20230515)\n        ---        \n    \"#)\n    \n    DTM03_time string? @description(#\"\n        Example:\n        ---        \n        * (DTM*573*20230515*1300~, 1300)\n        ---        \n    \"#)\n}\n",
    "extractors/x12/prompts/835/5010/fields/GE/v0.baml": "class X12_835_5010_GE_V0 {\n    GE01_number_of_transaction_sets_included string @description(#\"\n        Example:\n        ---        \n        * (GE*1*12345678~, Number of Transaction Sets Included)\n        ---        \n    \"#)\n\n    GE02_group_control_number string @description(#\"\n        Example:\n        ---        \n        * (GE*1*12345678~, Group Control Number)\n        ---        \n    \"#)\n}\n",
    "extractors/x12/prompts/835/5010/fields/GS/v0.baml": "class X12_835_5010_GS_V0 {\n    GS01_functional_identifier_code string @description(#\"\n        Example:\n        ---        \n        * (GS*HP*ABCD*ABCD*20190827*12345678*12345678*X*005010X221A1~, Functional Identifier Code)\n        ---        \n    \"#)\n\n    GS02_application_sender_code string @description(#\"\n        Example:\n        ---        \n        (GS*HP*ABCD*ABCD*20190827*12345678*12345678*X*005010X221A1~, Application Sender's Code)\n        ---        \n    \"#)\n\n    GS03_application_receiver_code string @description(#\"\n        Example:\n        ---        \n        * (GS*HP*ABCD*ABCD*20190827*12345678*12345678*X*005010X221A1~, Application Receiver's Code)\n        ---        \n    \"#)\n\n    GS04_date string @description(#\"\n        Example:\n        ---        \n        * (GS*HP*ABCD*ABCD*20190827*12345678*12345678*X*005010X221A1~, Date)\n        ---        \n    \"#)\n\n    GS05_time string @description(#\"\n        Example:\n        ---        \n        * (GS*HP*ABCD*ABCD*20190827*12345678*12345678*X*005010X221A1~, Time)\n        ---        \n    \"#)\n\n    GS06_group_control_number string @description(#\"\n        Example:\n        ---        \n        * (GS*HP*ABCD*ABCD*20190827*12345678*12345678*X*005010X221A1~, Group Control Number)\n        ---        \n    \"#)\n\n    GS07_responsible_agency_code string @description(#\"\n        Example:\n        ---        \n        * (GS*HP*ABCD*ABCD*20190827*12345678*12345678*X*005010X221A1~, Responsible Agency Code)\n        ---        \n    \"#)\n\n    GS08_version_release_code string @description(#\"\n        Example:\n        ---        \n        * (GS*HP*ABCD*ABCD*20190827*12345678*12345678*X*005010X221A1~, Version Release Code)\n        ---        \n    \"#)\n}\n",
    "extractors/x12/prompts/835/5010/fields/IEA/v0.baml": "class X12_835_5010_IEA_V0 {\n    IEA01_number_of_functional_groups_included string @description(#\"\n        Example:\n        ---        \n        * (IEA*1*191511902~, 1)\n        ---        \n    \"#)\n    \n    IEA02_interchange_control_number string @description(#\"\n        Example:\n        ---        \n        * (IEA*1*191511902~, 191511902)\n        ---        \n    \"#)\n}\n",
    "extractors/x12/prompts/835/5010/fields/ISA/v0.baml": "class X12_835_5010_ISA_V0 {\n    ISA01_authorization_information_qualifier string @description(#\"\n        Example: \n        ---        \n        * (ISA*00*          *00*          *ZZ*ABCPAYER       *ZZ*RECEIVERID     *190827*0212*^*00501*191511902*0*P*>~, 00)\n        ---        \n    \"#)\n    \n    ISA02_authorization_information string? @description(#\"\n        Example: \n        ---        \n        * (ISA*00*          *00*          *ZZ*ABCPAYER       *ZZ*RECEIVERID     *190827*0212*^*00501*191511902*0*P*>~,          )\n        * (ISA*01*AUTHINFO01*00*          *ZZ*ABCPAYER       *ZZ*RECEIVERID     *190827*0212*^*00501*191511902*0*P*>~, AUTHINFO01)\n        ---        \n    \"#)\n    \n    ISA03_security_information_qualifier string @description(#\"\n        Example: \n        ---        \n        * (ISA*00*          *00*          *ZZ*ABCPAYER       *ZZ*RECEIVERID     *190827*0212*^*00501*191511902*0*P*>~, 00)\n        ---\n    \"#)\n    \n    ISA04_security_information string? @description(#\"\n        Example: \n        ---        \n        * (ISA*00*          *00*          *ZZ*ABCPAYER       *ZZ*RECEIVERID     *190827*0212*^*00501*191511902*0*P*>~,          )\n        * (ISA*00*          *01*SECINFO01*ZZ*ABCPAYER       *ZZ*RECEIVERID     *190827*0212*^*00501*191511902*0*P*>~, SECINFO01)\n        ---        \n    \"#)\n    \n    ISA05_interchange_id_qualifier_sender string @description(#\"\n        Example:\n        ---        \n        * (ISA*00*          *00*          *ZZ*ABCPAYER       *ZZ*RECEIVERID     *190827*0212*^*00501*191511902*0*P*>~, ZZ)\n        ---        \n    \"#)\n    \n    ISA06_interchange_sender_id string? @description(#\"\n        Example:\n        ---        \n        * (ISA*00*          *00*          *ZZ*ABCPAYER       *ZZ*RECEIVERID     *190827*0212*^*00501*191511902*0*P*>~, ABCPAYER       )\n        ---        \n    \"#)\n    \n    ISA07_interchange_id_qualifier_receiver string @description(#\"\n        Example:\n        ---        \n        * (ISA*00*          *00*          *ZZ*ABCPAYER       *ZZ*RECEIVERID     *190827*0212*^*00501*191511902*0*P*>~, ZZ)\n        ---        \n    \"#)\n    \n    ISA08_interchange_receiver_id string @description(#\"\n        Example:\n        ---        \n        * (ISA*00*          *00*          *ZZ*ABCPAYER       *ZZ*RECEIVERID     *190827*0212*^*00501*191511902*0*P*>~, RECEIVERID     )\n        ---        \n    \"#)\n    \n    ISA09_interchange_date string @description(#\"\n        Example:\n        ---\n        * (ISA*00*          *00*          *ZZ*ABCPAYER       *ZZ*RECEIVERID     *190827*0212*^*00501*191511902*0*P*>~, 190827)\n        ---        \n    \"#)\n    \n    ISA10_interchange_time string @description(#\"\n        Example:\n        ---        \n        * (ISA*00*          *00*          *ZZ*ABCPAYER       *ZZ*RECEIVERID     *190827*0212*^*00501*191511902*0*P*>~, 0212)\n        ---        \n    \"#)\n    \n    ISA11_repetition_separator string @description(#\"\n        Example:\n        ---        \n        * (ISA*00*          *00*          *ZZ*ABCPAYER       *ZZ*RECEIVERID     *190827*0212*^*00501*191511902*0*P*>~, >)\n        ---\n    \"#)\n    \n    ISA12_interchange_control_version_number string @description(#\"\n        Example:\n        ---        \n        * (ISA*00*          *00*          *ZZ*ABCPAYER       *ZZ*RECEIVERID     *190827*0212*^*00501*191511902*0*P*>~, 00501)\n        ---        \n    \"#)\n    \n    ISA13_interchange_control_number string @description(#\"\n        Example:\n        ---        \n        * (ISA*00*          *00*          *ZZ*ABCPAYER       *ZZ*RECEIVERID     *190827*0212*^*00501*191511902*0*P*>~, 191511902)\n        ---        \n    \"#)\n    \n    ISA14_acknowledgment_requested string @description(#\"\n        Example:\n        ---        \n        * (ISA*00*          *00*          *ZZ*ABCPAYER       *ZZ*RECEIVERID     *190827*0212*^*00501*191511902*0*P*>~, 0)\n        ---        \n    \"#)\n    \n    ISA15_usage_indicator string @description(#\"\n        Example:\n        ---        \n        * (ISA*00*          *00*          *ZZ*ABCPAYER       *ZZ*RECEIVERID     *190827*0212*^*00501*191511902*0*P*>~, P)\n        ---        \n    \"#)\n    \n    ISA16_component_element_separator string @description(#\"\n        Example:\n        ---        \n        * (ISA*00*          *00*          *ZZ*ABCPAYER       *ZZ*RECEIVERID     *190827*0212*^*00501*191511902*0*P*>~, >)\n        ---        \n    \"#)\n}\n",
    "extractors/x12/prompts/835/5010/fields/LX/v0.baml": "class X12_835_5010_LX_V0 {\n    LX01_assigned_number string @description(#\"\n        Example:\n        ---        \n        * (LX*1~, 1)\n        * (LX*2~, 2)\n        * (LX*3~, 3)\n        ---        \n    \"#)\n}\n",
    "extractors/x12/prompts/835/5010/fields/MOA/v0.baml": "\nclass X12_835_5010_MOA_V0 {\n    MOA01_monetary_amount_qualifier_code string @description(#\"\n        Example:\n        ---        \n        * (MOA*N25*100~, N25)\n        ---        \n    \"#)\n\n    MOA02_monetary_amount string @description(#\"\n        Example:\n        ---        \n        * (MOA*N25*100~, 100)\n        ---        \n    \"#)\n\n    MOA03_reference_identification string? @description(#\"\n        Example:\n        ---        \n        * (MOA*N25*100*REF123~, REF123)\n        ---        \n    \"#)\n}\n",
    "extractors/x12/prompts/835/5010/fields/N1/v0.baml": "class X12_835_5010_N1_V0 {\n    N101_entity_identifier_code string @description(#\"\n        Example:\n        ---        \n        * (N1*PR*ANY PLAN USA*FI*123456789~, PR)\n        ---        \n    \"#)\n\n    N102_name string? @description(#\"\n        Example:\n        ---        \n        * (N1*PR*ANY PLAN USA*FI*123456789~, ANY PLAN USA)\n        ---        \n    \"#)\n\n    N103_identification_code_qualifier string? @description(#\"\n        Example:\n        ---        \n        * (N1*PR*ANY PLAN USA*FI*123456789~, FI)\n        ---        \n    \"#)\n\n    N104_identification_code string? @description(#\"\n        Example:\n        ---        \n        * (N1*PR*ANY PLAN USA*FI*123456789~, 123456789)\n        ---        \n    \"#)\n}\n",
    "extractors/x12/prompts/835/5010/fields/N2/v0.baml": "class X12_835_5010_N2_V0 {\n    N201_name string @description(#\"\n        Example:\n        ---        \n        * (N2*SECONDARY NAME~, SECONDARY NAME)\n        ---        \n    \"#)\n\n    N202_name string? @description(#\"\n        Example:\n        ---        \n        * (N2*SECONDARY NAME*CONTINUATION~, CONTINUATION)\n        ---        \n    \"#)\n}\n",
    "extractors/x12/prompts/835/5010/fields/N3/v0.baml": "class X12_835_5010_N3_V0 {\n    N301_address_information string @description(#\"\n        Example:\n        ---        \n        * (N3*1 WALK THIS WAY~, 1 WALK THIS WAY)\n        ---        \n    \"#)\n\n    N302_address_information string? @description(#\"\n        Example:\n        ---        \n        * (N3*1 WALK THIS WAY*SUITE 100~, SUITE 100)\n        ---        \n    \"#)\n}\n",
    "extractors/x12/prompts/835/5010/fields/N4/v0.baml": "class X12_835_5010_N4_V0 {\n    N401_city_name string @description(#\"\n        Example:\n        ---        \n        * (N4*ANYCITY*OH*45209~, ANYCITY)\n        ---\n    \"#)\n\n    N402_state_or_province_code string? @description(#\"\n        Example:\n        ---        \n        * (N4*ANYCITY*OH*45209~, OH)\n        ---        \n    \"#)\n\n    N403_postal_code string? @description(#\"\n        Example:\n        ---        \n        * (N4*ANYCITY*OH*45209~, 45209)\n        ---        \n    \"#)\n\n    N404_country_code string? @description(#\"\n        Example:\n        ---        \n        * (N4*ANYCITY*OH*45209*US~, US)\n        ---        \n    \"#)\n\n    N405_location_qualifier string? @description(#\"\n        Example:\n        ---        \n        * (N4*ANYCITY*OH*45209*US*BR~, BR)\n        ---        \n    \"#)\n\n    N406_location_identifier string? @description(#\"\n        Example:\n        ---        \n        * (N4*ANYCITY*OH*45209*US*BR*LOC123~, LOC123)\n        ---        \n    \"#)\n}\n",
    "extractors/x12/prompts/835/5010/fields/NM1/v0.baml": "class X12_835_5010_NM1_V0 {\n    NM101_entity_identifier_code string @description(#\"\n        Example:\n        ---        \n        * (NM1*QC*1*LAST*FIRST*J***MI*123456789~, QC)\n        ---        \n    \"#)\n\n    NM102_entity_type_qualifier string @description(#\"\n        Example:\n        ---        \n        * (NM1*QC*1*LAST*FIRST*J***MI*123456789~, 1)\n        ---        \n    \"#)\n\n    NM103_last_name_or_organization_name string @description(#\"\n        Example:\n        ---        \n        * (NM1*QC*1*LAST*FIRST*J***MI*123456789~, LAST)\n        ---        \n    \"#)\n\n    NM104_first_name string? @description(#\"\n        Example:\n        ---        \n        * (NM1*QC*1*LAST*FIRST*J***MI*123456789~, FIRST)\n        ---        \n    \"#)\n\n    NM105_middle_initial string? @description(#\"\n        Example:\n        ---        \n        * (NM1*QC*1*LAST*FIRST*J***MI*123456789~, J)\n        ---        \n    \"#)\n\n    NM106_name_prefix string? @description(#\"\n        Example:\n        ---        \n        * (NM1*QC*1*LAST*FIRST*J***MI*123456789~, )\n        ---        \n    \"#)\n\n    NM107_name_suffix string? @description(#\"\n        Example:\n        ---        \n        * (NM1*QC*1*LAST*FIRST*J***MI*123456789~, )\n        ---        \n    \"#)\n\n    NM108_identification_code_qualifier string @description(#\"\n        Example:\n        ---        \n        * (NM1*QC*1*LAST*FIRST*J***MI*123456789~, MI)\n        ---        \n    \"#)\n\n    NM109_identification_code string @description(#\"\n        Example:\n        ---       \n        * (NM1*QC*1*LAST*FIRST*J***MI*123456789~, 123456789)\n        ---\n    \"#)\n}\n",
    "extractors/x12/prompts/835/5010/fields/PER/v0.baml": "class X12_835_5010_PER_V0 {\n    PER01_contact_function_code string @description(#\"\n        Example:\n        ---\n        * (PER*CX*John Doe*TE*8661112222~, Contact Function Code)\n        ---        \n    \"#)\n    \n    PER02_contact_name string? @description(#\"\n        Example:\n        ---        \n        * (PER*CX*John Doe*TE*8661112222~, John Doe)\n        ---\n    \"#)\n    \n    PER03_communication_number_qualifier string? @description(#\"\n        Example:\n        ---\n        * (PER*CX*John Doe*TE*8661112222~, Communication Number Qualifier)\n        ---\n    \"#)\n    \n    PER04_communication_number string? @description(#\"\n        Example:\n        ---\n        * (PER*CX*John Doe*TE*8661112222~, 8661112222)\n        ---        \n    \"#)\n    \n    PER05_communication_number_qualifier string? @description(#\"\n        Example:\n        ---\n        * (PER*BL*EDI*TE*8002223333*EM*EDI.SUPPORT@ANYPAYER.COM~, Communication Number Qualifier)\n        ---\n    \"#)\n    \n    PER06_communication_number string? @description(#\"\n        Example:\n        ---        \n        * (PER*BL*EDI*TE*8002223333*EM*EDI.SUPPORT@ANYPAYER.COM~, 8002223333)\n        ---        \n    \"#)\n}\n",
    "extractors/x12/prompts/835/5010/fields/REF/v0.baml": "class X12_835_5010_REF_V0 {\n    REF01_reference_identification_qualifier string @description(#\"\n        Example:\n        ---\n        * (REF*6R*12345~, 6R)\n        * (REF*EV*987654321~, EV)\n        * (REF*ZZ*CustomID123~, ZZ)\n        ---\n    \"#)\n    \n    REF02_reference_identification string @description(#\"\n        Example:\n        ---\n        * (REF*6R*12345~, 12345)\n        * (REF*EV*987654321~, 987654321)\n        * (REF*ZZ*CustomID123~, CustomID123)\n        ---\n    \"#)\n    \n    REF03_description string? @description(#\"\n        Example:\n        ---\n        * (REF*6R*12345*Provider's Internal ID~, Provider's Internal ID)\n        * (REF*EV*987654321*Employer's Tax ID~, Employer's Tax ID)\n        * (REF*ZZ*CustomID123*Special Reference~, Special Reference)\n        ---\n    \"#)\n}\n",
    "extractors/x12/prompts/835/5010/fields/SE/v0.baml": "class X12_835_5010_SE_V0 {\n    SE01_segment_count string @description(#\"\n        Example:\n        ---\n        * (SE*31*10060875~, 31)\n        ---        \n    \"#)\n\n    SE02_transaction_set_control_number string @description(#\"\n        Example:\n        ---        \n        * (SE*31*10060875~, 10060875)\n        ---\n    \"#)\n}\n",
    "extractors/x12/prompts/835/5010/fields/ST/v0.baml": "class X12_835_5010_ST_V0 {\n    ST01_transaction_set_identifier_code string @description(#\"\n        Example:\n        ---        \n        * (ST*835*10060875~, 835)\n        ---        \n    \"#)\n    ST02_transaction_set_control_number string @description(#\"\n        Example:\n        ---\n        * (ST*835*10060875~, 10060875)\n        ---        \n    \"#) \n}\n",
    "extractors/x12/prompts/835/5010/fields/SVC/v0.baml": "\nclass X12_835_5010_SVC_V0 {\n    SVC01_composite_medical_procedure_identifier string @description(#\"\n        Example:\n        ---\n        * (SVC*HC>99214*25*8~, HC>99214)        \n        ---\n    \"#)\n\n    SVC02_line_item_charge_amount string @description(#\"\n        Example:\n        ---        \n        * (SVC*HC>99214*25*8~, 25)\n        ---        \n    \"#)\n\n    SVC03_line_item_payment_amount string @description(#\"\n        Example:\n        ---        \n        * (SVC*HC>99214*25*8~, 8)\n        ---        \n    \"#)\n\n    SVC04_service_quantity string? @description(#\"\n        Example:\n        ---        \n        * (SVC*HC>99214*25*8*2~, 2)\n        ---        \n    \"#)\n\n    SVC05_composite_medical_procedure_identifier string? @description(#\"\n        Example:\n        ---        \n        * (SVC*HC>99214*25*8*2*HC>12345~, HC>12345)\n        ---        \n    \"#)\n}\n",
    "extractors/x12/prompts/835/5010/fields/TRN/v0.baml": "class X12_835_5010_TRN_V0 {\n    TNR01_trace_type_code string @description(#\"\n        Example:\n        ---        \n        * (TRN*1*1234567890*ABC123*XYZ789~, 1)\n        * (TRN*2*0987654321*DEF456*UVW012~, 2)\n        * (TRN*ZZ*CustomTrace123*SupplementalCode456~, ZZ)\n        ---\n    \"#)\n    \n    TNR03_check_or_eft_trace_number string @description(#\"\n        Example:\n        ---        \n        * (TRN*1*1234567890*ABC123*XYZ789~, 1234567890)\n        * (TRN*2*0987654321*DEF456*UVW012~, 0987654321)\n        ---        \n    \"#)\n    \n    TNR03_payer_identifier string? @description(#\"\n        Example:\n        ---        \n        * (TRN*1*1234567890*ABC123*XYZ789~, ABC123)\n        * (TRN*2*0987654321*DEF456*UVW012~, DEF456)\n        ---\n    \"#)\n    \n    TRN04_originating_company_supplemental_code string? @description(#\"\n        Example:\n        * (TRN*1*1234567890*ABC123*XYZ789~, XYZ789)\n        * (TRN*ZZ*CustomTrace123*SupplementalCode456~, SupplementalCode456)\n    \"#)\n}\n",
    "extractors/x12/prompts/835/5010/main.baml": "class X12_835_5010 {\n    ISA_interchange_control_header (X12_835_5010_ISA_V0) @description(#\"\n        Represents the ISA (Interchange Control Header) segment in an X12 835 5010 transaction.\n    \"#)\n\n    IEA_interchange_control_trailer (X12_835_5010_IEA_V0) @description(#\"\n        Represents the IEA (Interchange Control Trailer) segment in an X12 835 5010 transaction.\n    \"#)\n\n    ST_transaction_set_header (X12_835_5010_ST_V0)? @description(#\"\n        Represents the ST (Transaction Set Header) segment in an X12 835 5010 transaction.\n        Optional as there may not be a transaction set header in some cases.\n    \"#)\n\n    BPR_financial_information (X12_835_5010_BPR_V0) @description(#\"\n        Represents the BPR (Financial Information) segment in an X12 835 5010 transaction.\n    \"#)\n\n    TRN_reassociation_trace_number (X12_835_5010_TRN_V0) @description(#\"\n        Represents the TRN (Reassociation Trace Number) segment in an X12 835 5010 transaction.\n    \"#)\n\n    CUR_foreign_currency_information (X12_835_5010_CUR_V0)? @description(#\"\n        Represents the CUR (Foreign Currency Information) segment in an X12 835 5010 transaction.\n        Optional as foreign currency information is not always provided.\n    \"#)\n\n    REF_receiver_identification (X12_835_5010_REF_V0)? @description(#\"\n        Represents the REF (Receiver Identification) segment in an X12 835 5010 transaction.\n        Optional as receiver identification might not be included in all transactions.\n    \"#)\n\n    DTM_production_date (X12_835_5010_DTM_V0)? @description(#\"\n        Represents the DTM (Production Date) segment in an X12 835 5010 transaction.\n        Optional as the production date may not be applicable in all contexts.\n    \"#)\n\n    N1_entity_information (X12_835_5010_N1_V0)[] @description(#\"\n        Represents one or more N1 (Entity Information) segments in an X12 835 5010 transaction.\n        Optional as there may not always be entity information provided.\n    \"#)\n\n    N2_additional_name_information (X12_835_5010_N2_V0)[] @description(#\"\n        Represents one or more N2 (Additional Name Information) segments in an X12 835 5010 transaction.\n        Optional and typically used when additional name details are required.\n    \"#)\n\n    N3_address_information (X12_835_5010_N3_V0)[] @description(#\"\n        Represents one or more N3 (Address Information) segments in an X12 835 5010 transaction.\n        Optional and used to specify address details.\n    \"#)\n\n    N4_geographic_location (X12_835_5010_N4_V0)[] @description(#\"\n        Represents one or more N4 (Geographic Location) segments in an X12 835 5010 transaction.\n        Optional and used for specifying location details like city, state, and ZIP code.\n    \"#)\n\n    LX_service_line_number (X12_835_5010_LX_V0)[] @description(#\"\n        Represents one or more LX (Service Line Number) segments in an X12 835 5010 transaction.\n        Optional as service line details may not always be included.\n    \"#)\n\n    CLP_claim_payment_information (X12_835_5010_CLP_V0)[] @description(#\"\n        Represents one or more CLP (Claim Payment Information) segments in an X12 835 5010 transaction.\n        Optional and typically contains details about claims and payments.\n    \"#)\n\n    NM1_individual_or_organizational_name (X12_835_5010_NM1_V0)[] @description(#\"\n        Represents one or more NM1 (Individual or Organizational Name) segments in an X12 835 5010 transaction.\n        Optional and used for naming information about involved parties.\n    \"#)\n\n    MOA_monetary_amount (X12_835_5010_MOA_V0)[] @description(#\"\n        Represents one or more MOA (Monetary Amount) segments in an X12 835 5010 transaction.\n        Optional and used when monetary details are required.\n    \"#)\n\n    SVC_service_payment_information (X12_835_5010_SVC_V0)[] @description(#\"\n        Represents one or more SVC (Service Payment Information) segments in an X12 835 5010 transaction.\n        Optional and used to provide details about individual service payments.\n    \"#)\n\n    CAS_claim_adjustment (X12_835_5010_CAS_V0)[] @description(#\"\n        Represents one or more CAS (Claim Adjustment) segments in an X12 835 5010 transaction.\n        Optional and used when adjustments to claims are specified.\n    \"#)\n\n    AMT_monetary_amount (X12_835_5010_AMT_V0)[] @description(#\"\n        Represents one or more AMT (Monetary Amount) segments in an X12 835 5010 transaction.\n        Optional and used for specific monetary adjustments or details.\n    \"#)\n}\n",
    "extractors/x12/prompts/835/5010/tests/test_claim_specific_negotiated_discount.baml": "test Test_X12_835_5010_ClaimAdjustmentReasonCode45 {\n  functions [X12Extractor]\n  args {\n    params {\n        release 5010\n        transaction_set_id 835\n        data #\"\n          ISA*00*          *00*          *ZZ*ABCPAYER       *ZZ*ABCPAYER       *190827*0212*^*00501*191511902*0*P*>~\n          GS*HP*ABCD*ABCD*20190827*12345678*12345678*X*005010X221A1~\n          ST*835*10060875~\n          BPR*I*80.00*C*CHK************20190816~\n          TRN*1*CK NUMBER 1*1234567890~\n          REF*EV*FAC~\n          DTM*405*20190827~\n          N1*PR*ANY PLAN USA~\n          N3*1 WALK THIS WAY~\n          N4*ANYCITY*OH*45209~\n          PER*CX**TE*8661112222~\n          PER*BL*EDI*TE*8002223333*EM*EDI.SUPPORT@ANYPAYER.COM~\n          PER*IC**UR*WWW.ANYPAYER.COM~\n          N1*PE*PROVIDER*XX*1123454567~\n          N3*2255 ANY ROAD~\n          N4*ANY CITY*CA*12211~\n          REF*TJ*123456789~\n          LX*1~\n          CLP*PATACCT*1*400*80**MC*CLAIMNUMBER*11*1~\n          NM1*QC*1*DOE*JOHN*N***MI*ABC123456789~\n          REF*1L*12345F~\n          DTM*050*20190209~\n          PER*CX*G CUSTOMER SERVICE DEPARTMENT*TE*8004074627~\n          AMT*AU*150~\n          SVC*HC>99213*150*80**1~\n          DTM*472*20190101~\n          CAS*CO*45*70~\n          AMT*B6*80~\n          SVC*HC>85003*100*0**1~\n          DTM*472*20190101~\n          CAS*CO*204*100~\n          SVC*HC>36415*150*0**1~\n          DTM*472*20190101~\n          CAS*CO*97*150~\n          SE*33*10060875~\n          GE*1*12345678~\n          IEA*1*191511902~\n        \"#\n    }\n  }\n}\n",
    "extractors/x12/prompts/835/5010/tests/test_incorrect_subscriber_as_patient_and_incorrect_id.baml": "test Test_X12_835_5010_IncorrectSubscriberNameAndID {\n  functions [X12Extractor]\n  args {\n    params {\n        release 5010\n        transaction_set_id 835\n        data #\"\n          ISA*00*          *00*          *ZZ*ABCPAYER       *ZZ*ABCPAYER       *190827*0212*^*00501*191511902*0*P*|~\n          GS*HP*ABCD*ABCD*20190827*12345678*12345678*X*005010X221A1~\n          ST*835*10060875~\n          BPR*I*35.06*C*CHK************20190816~\n          TRN*1*CK NUMBER 1*1234567890~\n          REF*EV*FAC~\n          DTM*405*20190827~\n          N1*PR*ANY PLAN USA~\n          N3*1 WALK THIS WAY~\n          N4*ANYCITY*OH*45209~\n          PER*CX**TE*8661112222~\n          PER*BL*EDI*TE*8002223333*EM*EDI.SUPPORT@ANYPAYER.COM~\n          PER*IC**UR*WWW.ANYPAYER.COM~\n          N1*PE*PROVIDER*XX*1123454567~\n          N3*2255 ANY ROAD~\n          N4*ANY CITY*CA*12211~\n          REF*TJ*123456789~\n          LX*1~\n          CLP*02333TLC222222*1*115*35.06*35*13*8333333214*11*1~\n          NM1*QC*1*KEATON*ALEX*P***MI*80000006006~\n          NM1*IL*1*THOMAS*JASON****MI*80000006006~\n          NM1*74*1**JEROME****C*80000006001~\n          NM1*82*1*BLOOD MD*RED N****XX*1888888886~\n          REF*1L*28~\n          REF*CE*OAPOS-LAOA~\n          DTM*232*20191113~\n          DTM*233*20191113~\n          DTM*050*20191119~\n          AMT*AU*115~\n          SVC*HC|99213*115*35.06**1~\n          DTM*472*20191113~\n          CAS*CO*45*44.94~\n          CAS*PR*3*35~\n          REF*LU*11~\n          REF*6R*22261389~\n          AMT*B6*70.06~\n          SE*35*10060875~\n          GE*1*12345678~\n          IEA*1*191511902~\n        \"#\n    }\n  }\n}\n",
    "extractors/x12/prompts/835/5010/tests/test_line_service_bonuses_impacting_payment_only.baml": "test Test_X12_835_5010_LineServiceBonusesImpactingPaymentOnly {\n  functions [X12Extractor]\n  args {\n    params {\n        release 5010\n        transaction_set_id 835\n        data #\"\n          ISA*00*          *00*          *ZZ*ABCPAYER       *ZZ*ABCPAYER       *190827*0212*^*00501*191511902*0*P*>~\n          GS*HP*ABCD*ABCD*20190827*12345678*12345678*X*005010X221A1~\n          ST*835*10060875~\n          BPR*I*12.00*C*CHK************20190816~\n          TRN*1*CK NUMBER 1*1234567890~\n          REF*EV*FAC~\n          DTM*405*20190827~\n          N1*PR*ANY PLAN USA~\n          N3*1 WALK THIS WAY~\n          N4*ANYCITY*OH*45209~\n          PER*CX**TE*8661112222~\n          PER*BL*EDI*TE*8002223333*EM*EDI.SUPPORT@ANYPAYER.COM~\n          PER*IC**UR*WWW.ANYPAYER.COM~\n          N1*PE*PROVIDER*XX*1123454567~\n          N3*2255 ANY ROAD~\n          N4*ANY CITY*CA*12211~\n          REF*TJ*123456789~\n          LX*1~\n          CLP*PCN*1*25*12*10*12*CLAIMNUMB*11*1~\n          NM1*QC*1*LAST*FIRST*J***MI*123456789~\n          NM1*82*1******XX*1447481825~\n          MOA***N25~\n          REF*1L*102345~\n          REF*EA*065789~\n          DTM*050*20170113~\n          AMT*AU*25~\n          SVC*HC>99214*25*12~\n          DTM*472*20170109~\n          CAS*CO*45*5**161*-2~\n          CAS*PR*3*10~\n          REF*6R*123~\n          AMT*B6*20~\n          SE*31*10060875~\n          GE*1*12345678~\n          IEA*1*191511902~\n        \"#\n    }\n  }\n}\n",
    "extractors/x12/prompts/835/5010/tests/test_line_service_penalty_impacting_payment_only.baml": "\ntest Test_X12_835_5010_LineServicePenaltyImpactingPaymentOnly {\n  functions [X12Extractor]\n  args {\n    params {\n        release 5010\n        transaction_set_id 835\n        data #\"\n          ISA*00*          *00*          *ZZ*ABCPAYER       *ZZ*ABCPAYER       *190827*0212*^*00501*191511902*0*P*>~\n          GS*HP*ABCD*ABCD*20190827*12345678*12345678*X*005010X221A1~\n          ST*835*10060875~\n          BPR*I*8.00*C*CHK************20190816~\n          TRN*1*CK NUMBER 1*1234567890~\n          REF*EV*FAC~\n          DTM*405*20190827~\n          N1*PR*ANY PLAN USA~\n          N3*1 WALK THIS WAY~\n          N4*ANYCITY*OH*45209~\n          PER*CX**TE*8661112222~\n          PER*BL*EDI*TE*8002223333*EM*EDI.SUPPORT@ANYPAYER.COM~\n          PER*IC**UR*WWW.ANYPAYER.COM~\n          N1*PE*PROVIDER*XX*1123454567~\n          N3*2255 ANY ROAD~\n          N4*ANY CITY*CA*12211~\n          REF*TJ*123456789~\n          LX*1~\n          CLP*PCN*1*25*8*10*12*CLAIMNUMB*11*1~\n          NM1*QC*1*LAST*FIRST*J***MI*123456789~\n          NM1*82*1******XX*1447481825~\n          MOA***N25~\n          REF*1L*102345~\n          REF*EA*065789~\n          DTM*050*20170113~\n          AMT*AU*25~\n          SVC*HC>99214*25*8~\n          DTM*472*20170109~\n          CAS*CO*45*5**B4*2~\n          CAS*PR*3*10~\n          REF*6R*123~\n          AMT*B6*20~\n          SE*31*10060875~\n          GE*1*12345678~\n          IEA*1*191511902~\n        \"#\n    }\n  }\n}\n",
    "extractors/x12/prompts/835/5010/tests/test_line_service_tax_impacting_payment_only.baml": "test Test_X12_835_5010_LineServiceTaxImpactingPaymentOnly {\n  functions [X12Extractor]\n  args {\n    params {\n        release 5010\n        transaction_set_id 835\n        data #\"\n          ISA*00*          *00*          *ZZ*ABCPAYER       *ZZ*ABCPAYER       *190827*0212*^*00501*191511902*0*P*>~\n          GS*HP*ABCD*ABCD*20190827*12345678*12345678*X*005010X221A1~\n          ST*835*10060875~\n          BPR*I*12.00*C*CHK************20190816~\n          TRN*1*CK NUMBER 1*1234567890~\n          REF*EV*FAC~\n          DTM*405*20190827~\n          N1*PR*ANY PLAN USA~\n          N3*1 WALK THIS WAY~\n          N4*ANYCITY*OH*45209~\n          PER*CX**TE*8661112222~\n          PER*BL*EDI*TE*8002223333*EM*EDI.SUPPORT@ANYPAYER.COM~\n          PER*IC**UR*WWW.ANYPAYER.COM~\n          N1*PE*PROVIDER*XX*1123454567~\n          N3*2255 ANY ROAD~\n          N4*ANY CITY*CA*12211~\n          REF*TJ*123456789~\n          LX*1~\n          CLP*PCN*1*25*12*10*12*CLAIMNUMB*11*1~\n          NM1*QC*1*LAST*FIRST*J***MI*123456789~\n          NM1*82*1******XX*1447481825~\n          MOA***N25~\n          REF*1L*102345~\n          REF*EA*065789~\n          DTM*050*20170113~\n          AMT*AU*25~\n          SVC*HC>99214*25*12~\n          DTM*472*20170109~\n          CAS*CO*45*5**161*-2~\n          CAS*PR*3*10~\n          REF*6R*123~\n          AMT*B6*20~\n          SE*31*10060875~\n          GE*1*12345678~\n          IEA*1*191511902~\n        \"#\n    }\n  }\n}\n",
    "extractors/x12/prompts/835/5010/tests/test_minimal_transaction.baml": "test Test_X12_835_5010_MinimalTransaction {\n  functions [X12Extractor]\n  args {\n    params {\n        release 5010\n        transaction_set_id 835\n        data #\"\n          ISA*00*          *00*          *ZZ*SENDERID       *ZZ*RECEIVERID     *230101*1200*^*00501*000000001*0*P*>~\n          GS*HP*SENDERID*RECEIVERID*20230101*1200*1*X*005010X221A1~\n          ST*835*0001~\n          BPR*I*1500.50*C*CHK************20230101~\n          TRN*1*1234567890*987654321~\n          SE*5*0001~\n          GE*1*1~\n          IEA*1*000000001~\n        \"#\n    }\n  }\n}\n",
    "extractors/x12/prompts/835/5010/tests/test_missing_address_and_location.baml": "test Test_X12_835_5010_MissingAddressAndLocation {\n  functions [X12Extractor]\n  args {\n    params {\n        release 5010\n        transaction_set_id 835\n        data #\"\n          ISA*00*          *00*          *ZZ*SENDERID       *ZZ*RECEIVERID     *230101*1200*^*00501*000000003*0*P*>~\n          GS*HP*SENDERID*RECEIVERID*20230101*1200*3*X*005010X221A1~\n          ST*835*0003~\n          BPR*I*100.00*C*CHK************20230101~\n          TRN*1*123456789*987654321~\n          REF*TJ*PROVIDERID~\n          N1*PE*PROVIDER NAME*XX*987654321~\n          LX*1~\n          CLP*CLAIM456*2*200.00*150.00*50.00**~\n          NM1*QC*1*SMITH*JANE****MI*123456789~\n          SVC*HC>99214*200.00*150.00~\n          CAS*PR*1*50.00~\n          DTM*472*20230101~\n          SE*12*0003~\n          GE*1*3~\n          IEA*1*000000003~\n        \"#\n    }\n  }\n}\n",
    "extractors/x12/prompts/835/5010/tests/test_missing_monetary_amounts.baml": "test Test_X12_835_5010_MissingMonetaryAmounts {\n  functions [X12Extractor]\n  args {\n    params {\n        x12_release 5010\n        transaction_set_id 835\n        x12_data #\"\n          ISA*00*          *00*          *ZZ*SENDERID       *ZZ*RECEIVERID     *230101*1200*^*00501*000000002*0*P*>~\n          GS*HP*SENDERID*RECEIVERID*20230101*1200*2*X*005010X221A1~\n          ST*835*0002~\n          BPR*I*200.00*C*ACH************20230101~\n          TRN*1*987654321*123456789~\n          REF*EV*FACILITYID~\n          N1*PR*PAYER NAME*FI*123456789~\n          N3*123 MAIN STREET~\n          N4*ANYTOWN*CA*12345~\n          LX*1~\n          CLP*CLAIM123*1*100.00*80.00*20.00**~\n          NM1*QC*1*DOE*JOHN****MI*987654321~\n          SVC*HC>99213*100.00*80.00~\n          CAS*CO*45*20.00~\n          DTM*472*20221231~\n          SE*13*0002~\n          GE*1*2~\n          IEA*1*000000002~\n        \"#\n    }\n  }\n}\n",
    "extractors/x12/prompts/835/5010/tests/test_multiple_claims_single_check.baml": "test Test_X12_835_5010_MultipleClaimsSingleCheck {\n  functions [X12Extractor]\n  args {\n    params {\n        release 5010\n        transaction_set_id 835\n        data #\"\n          ISA*00*          *00*          *ZZ*ABCPAYER       *ZZ*ABCPAYER       *190827*0212*^*00501*191511902*0*P*>~\n          GS*HP*ABCD*ABCD*20190827*12345678*12345678*X*005010X221A1~\n          ST*835*35681~\n          BPR*I*810.8*C*CHK************20190331~\n          TRN*1*12345*1512345678~\n          REF*EV*XYZ CLEARINGHOUSE~\n          N1*PR*DENTAL OF ABC~\n          N3*225 MAIN STREET~\n          N4*CENTERVILLE*PA*17111~\n          PER*BL*JANE DOE*TE*9005555555~\n          N1*PE*BAN DDS LLC*XX*9999947036~\n          REF*TJ*212121212~\n          LX*1~\n          CLP*7722337*1*226*132**12*119932404007801*11*1~\n          NM1*QC*1*DOE*SANDY****MI*SJD11112~\n          NM1*82*1*BAN*ERIN****XX*1811901945~\n          AMT*AU*132~\n          SVC*AD>D0120*46*25~\n          DTM*472*20190324~\n          CAS*CO*45*21~\n          AMT*B6*25~\n          SVC*AD>D0220*25*14~\n          DTM*472*20190324~\n          CAS*CO*45*11~\n          AMT*B6*14~\n          SVC*AD>D0230*22*10~\n          DTM*472*20190324~\n          CAS*CO*45*12~\n          AMT*B6*10~\n          SVC*AD>D0274*60*34~\n          DTM*472*20190324~\n          CAS*CO*45*26~\n          AMT*B6*34~\n          SVC*AD>D1110*73*49~\n          DTM*472*20190324~\n          CAS*CO*45*24~\n          AMT*B6*49~\n          CLP*7722337*1*119*74**12*119932404007801*11*1~\n          NM1*QC*1*DOE*SALLY****MI*SJD11111~\n          NM1*IL*1*DOE*JOHN****MI*SJD11111~\n          NM1*82*1*BAN*ERIN****XX*1811901945~\n          AMT*AU*74~\n          SVC*AD>D0120*46*25~\n          DTM*472*20190324~\n          CAS*CO*45*21~\n          AMT*B6*25~\n          SVC*AD>D1110*73*49~\n          DTM*472*20190324~\n          CAS*CO*45*24~\n          AMT*B6*49~\n          CLP*7722337*1*226*108*24*12*119932404007801*11*1~\n          NM1*QC*1*SMITH*SALLY****MI*SJD11113~\n          NM1*82*1*BAN*ERIN****XX*1811901945~\n          AMT*AU*132~\n          SVC*AD>D0120*46*25~\n          DTM*472*20190324~\n          CAS*CO*45*21~\n          AMT*B6*25~\n          SVC*AD>D0220*25*0~\n          DTM*472*20190324~\n          CAS*PR*3*14~\n          CAS*CO*45*11~\n          AMT*B6*14~\n          SVC*AD>D0230*22*0~\n          DTM*472*20190324~\n          CAS*PR*3*10~\n          CAS*CO*45*12~\n          AMT*B6*10~\n          SVC*AD>D0274*60*34~\n          DTM*472*20190324~\n          CAS*CO*45*26~\n          AMT*B6*34~\n          SVC*AD>D1110*73*49~\n          DTM*472*20190324~\n          CAS*CO*45*24~\n          AMT*B6*49~\n          CLP*7722337*1*1145*14*902*12*119932404007801*11*1~\n          NM1*QC*1*SMITH*SAM****MI*SJD11116~\n          NM1*82*1*BAN*ERIN****XX*1811901945~\n          AMT*AU*14~\n          SVC*AD>D0220*25*14~\n          DTM*472*20190324~\n          CAS*CO*45*11~\n          AMT*B6*14~\n          SVC*AD>D2790*940*0~\n          DTM*472*20190324~\n          CAS*PR*3*756~\n          CAS*CO*45*184~\n          SVC*AD>D2950*180*0~\n          DTM*472*20190324~\n          CAS*PR*3*146~\n          CAS*CO*45*34~\n          CLP*7722337*1*348*16.8*44.2*12*119932404007801*11*1~\n          NM1*QC*1*JONES*SAM****MI*SJD11122~\n          NM1*82*1*BAN*ERIN****XX*1811901945~\n          AMT*AU*28~\n          SVC*AD>D4342*125*0~\n          DTM*472*20190313~\n          CAS*CO*45*125~\n          SVC*AD>D4381*43*0~\n          DTM*472*20190313~\n          CAS*PR*3*33~\n          CAS*CO*45*10~\n          SVC*AD>D2950*180*16.8~\n          DTM*472*20190313~\n          CAS*PR*3*11.2~\n          CAS*CO*45*152~\n          AMT*B6*28~\n          CLP*7722337*1*226*132**12*119932404007801*11*1~\n          NM1*QC*1*JONES*SALLY****MI*SJD11133~\n          NM1*82*1*BAN*ERIN****XX*1811901945~\n          AMT*AU*132~\n          SVC*AD>D0120*46*25~\n          DTM*472*20190321~\n          CAS*CO*45*21~\n          AMT*B6*25~\n          SVC*AD>D0220*25*14~\n          DTM*472*20190321~\n          CAS*CO*45*11~\n          AMT*B6*14~\n          SVC*AD>D0230*22*10~\n          DTM*472*20190321~\n          CAS*CO*45*12~\n          AMT*B6*10~\n          SVC*AD>D0274*60*34~\n          DTM*472*20190321~\n          CAS*CO*45*26~\n          AMT*B6*34~\n          SVC*AD>D1110*73*49~\n          DTM*472*20190321~\n          CAS*CO*45*24~\n          AMT*B6*49~\n          CLP*7722337*1*179*108**12*119932404007801*11*1~\n          NM1*QC*1*DOE*SAM****MI*SJD99999~\n          NM1*82*1*BAN*ERIN****XX*1811901945~\n          AMT*AU*108~\n          SVC*AD>D0120*46*25~\n          DTM*472*20190324~\n          CAS*CO*45*21~\n          AMT*B6*25~\n          SVC*AD>D0274*60*34~\n          DTM*472*20190324~\n          CAS*CO*45*26~\n          AMT*B6*34~\n          SVC*AD>D1110*73*49~\n          DTM*472*20190324~\n          CAS*CO*45*24~\n          AMT*B6*49~\n          CLP*7722337*1*129*82**12*119932404007801*11*1~\n          NM1*QC*1*DOE*SUE****MI*SJD88888~\n          NM1*82*1*BAN*ERIN****XX*1811901945~\n          AMT*AU*82~\n          SVC*AD>D0120*46*25~\n          DTM*472*20190324~\n          CAS*CO*45*21~\n          AMT*B6*25~\n          SVC*AD>D1120*54*37~\n          DTM*472*20190324~\n          CAS*CO*45*17~\n          AMT*B6*37~\n          SVC*AD>D1208*29*20~\n          DTM*472*20190324~\n          CAS*CO*45*9~\n          AMT*B6*20~\n          CLP*7722337*1*221*144**12*119932404007801*11*1~\n          NM1*QC*1*DOE*DONNA****MI*SJD77777~\n          NM1*82*1*BAN*ERIN****XX*1811901945~\n          AMT*AU*144~\n          SVC*AD>D0120*46*25~\n          DTM*472*20190324~\n          CAS*CO*45*21~\n          AMT*B6*25~\n          SVC*AD>D0330*92*62~\n          DTM*472*20190324~\n          CAS*CO*45*30~\n          AMT*B6*62~\n          SVC*AD>D1120*54*37~\n          DTM*472*20190324~\n          CAS*CO*45*17~\n          AMT*B6*37~\n          SVC*AD>D1208*29*20~\n          DTM*472*20190324~\n          CAS*CO*45*9~\n          AMT*B6*20~\n          SE*183*35681~\n          GE*1*12345678~\n          IEA*1*191511902~\n        \"#\n    }\n  }\n}\n",
    "extractors/x12/prompts/835/5010/tests/test_not_covered_not_authorizedInpatient_facility_claim_days.baml": "test Test_X12_835_5010_NotCoveredNotAuthorizedInpatientFacilityClaimDays {\n  functions [X12Extractor]\n  args {\n    params {\n        release 5010\n        transaction_set_id 835\n        data #\"\n          ISA*00*          *00*          *ZZ*ABCPAYER       *ZZ*ABCPAYER       *190827*0212*^*00501*191511902*0*P*>~\n          GS*HP*ABCD*ABCD*20190827*12345678*12345678*X*005010X221A1~\n          ST*835*10060875~\n          BPR*I*8000.00*C*CHK************20190816~\n          TRN*1*CK NUMBER 1*1234567890~\n          REF*EV*FAC~\n          DTM*405*20190827~\n          N1*PR*ANY PLAN USA~\n          N3*1 WALK THIS WAY~\n          N4*ANYCITY*OH*45209~\n          PER*CX**TE*8661112222~\n          PER*BL*EDI*TE*8002223333*EM*EDI.SUPPORT@ANYPAYER.COM~\n          PER*IC**UR*WWW.ANYPAYER.COM~\n          N1*PE*PROVIDER*XX*1123454567~\n          N3*2255 ANY ROAD~\n          N4*ANY CITY*CA*12211~\n          REF*TJ*123456789~\n          LX*1~\n          CLP*PATACCT*1*40000*8000**MC*CLAIMNUMBER*11*1~\n          CAS*CO*197*2000*1*45*30000~\n          NM1*QC*1*DOE*JOHN*N***MI*ABC123456789~\n          REF*1L*12345F~\n          DTM*232*20190101~\n          DTM*233*20190105~\n          DTM*050*20190209~\n          PER*CX*G CUSTOMER SERVICE DEPARTMENT*TE*8004001212~\n          AMT*AU*38000~\n          QTY*CA*4~\n          SE*27*10060875~\n          GE*1*12345678~\n          IEA*1*191511902~\n        \"#\n    }\n  }\n}\n",
    "extractors/x12/prompts/835/5010/tests/test_subscriber_missing_middle_initial.baml": "test Test_X12_835_5010_SubscriberMissingMiddleInitial {\n  functions [X12Extractor]\n  args {\n    params {\n        release 5010\n        transaction_set_id 835\n        data #\"\n          ISA*00*          *00*          *ZZ*ABCPAYER       *ZZ*ABCPAYER       *190827*0212*^*00501*191511902*0*P*>~\n          GS*HP*ABCD*ABCD*20190827*12345678*12345678*X*005010X221A1~\n          ST*835*10060875~\n          BPR*I*2415.25*C*CHK************20190816~\n          TRN*1*CK NUMBER 1*1234567890~\n          REF*EV*FAC~\n          DTM*405*20190827~\n          N1*PR*ANY PLAN USA~\n          N3*1 WALK THIS WAY~\n          N4*ANYCITY*OH*45209~\n          PER*CX**TE*8661112222~\n          PER*BL*EDI*TE*8002223333*EM*EDI.SUPPORT@ANYPAYER.COM~\n          PER*IC**UR*WWW.ANYPAYER.COM~\n          N1*PE*PROVIDER*XX*1123454567~\n          N3*2255 ANY ROAD~\n          N4*ANY CITY*CA*12211~\n          REF*TJ*123456789~\n          LX*1~\n          CLP*05444444TLC999999*1*3903*2415.25**13*8777777782*21*1~\n          NM1*QC*1*GONZALES*SAMMY****MI*80455555502~\n          NM1*IL*1*LAPLANTE*FERN****MI*80455555502~\n          NM1*74*1***R~\n          NM1*82*1*GOOD MD*ROBERT B****XX*19999999987~\n          REF*1L*28~\n          REF*CE*OAPOS-LAOA~\n          DTM*232*20191101~\n          DTM*233*20191101~\n          DTM*050*20191114~\n          AMT*AU*3903~\n          AMT*F5*150~\n          SVC*HC>59400*3903*2415.25**1~\n          DTM*472*20191101~\n          CAS*CO*45*1487.75~\n          REF*LU*21~\n          REF*6R*22215592~\n          AMT*B6*2415.25~\n          SE*35*10060875~\n          GE*1*12345678~\n          IEA*1*191511902~\n        \"#\n    }\n  }  \n}\n",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.70.5\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
}

def get_baml_files():
    return file_map